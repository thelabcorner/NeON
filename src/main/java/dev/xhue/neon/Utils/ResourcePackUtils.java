package dev.xhue.neon.Utils;

            import java.io.*;
            import java.net.URI;
            import java.nio.charset.StandardCharsets;
            import java.security.MessageDigest;
            import java.util.Date;
            import java.util.HashMap;
            import java.util.Map;

            public class ResourcePackUtils {
                private static final File CACHE_FILE = new File("plugins/NeON/resourcepack_sha1.cache");
                private static final Map<String, String> cache = new HashMap<>();
                private static final String DELIM = "%===%"; // special delim case to avoid conflicts with URLs

                static {
                    loadCache();
                }

                private static void loadCache() {
                    if (!CACHE_FILE.exists()) return;
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(
                            new FileInputStream(CACHE_FILE), StandardCharsets.UTF_8))) {

                        String line;
                        while ((line = reader.readLine()) != null) {
                            // Skip comments and empty lines
                            if (line.trim().isEmpty() || line.startsWith("#")) continue;

                            // Split by the first %===% delimiter
                            int separatorIndex = line.indexOf(DELIM);
                            if (separatorIndex > 0) {
                                String url = line.substring(0, separatorIndex);
                                String sha1 = line.substring(separatorIndex + DELIM.length());
                                cache.put(url, sha1);
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                private static void saveCache() {
                    try {
                        // Create parent directories if they don't exist
                        CACHE_FILE.getParentFile().mkdirs();

                        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
                                new FileOutputStream(CACHE_FILE), StandardCharsets.UTF_8))) {

                            // Write header with Unicode symbols
                            writer.write("###################################\n");
                            writer.write("        ▐ ▄ ▄▄▄ .       ▐ ▄ \n");
                            writer.write("       •█▌▐█▀▄.▀·▪     •█▌▐█\n");
                            writer.write("       ▐█▐▐▌▐▀▀▪▄ ▄█▀▄ ▐█▐▐▌\n");
                            writer.write("       ██▐█▌▐█▄▄▌▐█▌.▐▌██▐█▌\n");
                            writer.write("       ▀▀ █▪ ▀▀▀  ▀█▄▀▪▀▀ █▪ by xHue\n");
                            writer.write("###################################\n");
                            writer.write("# NeON Resource Pack SHA-1 cache\n");
                            writer.write("# This file was auto-generated by NeON on: [" + new Date() + "]\n");
                            writer.write("# Please do not edit this file manually.\n");
                            writer.write("# \n");
                            writer.write("# This file contains the SHA-1 hashes of resource packs.\n");
                            writer.write("# It is used to verify the integrity of player-downloaded packs.\n");
                            writer.write("# \n");
                            writer.write("# If you want to clear the pack sha-1 cache, simply delete this file.\n");
                            writer.write("# Format: URL%===%SHA1\n");
                            writer.write("###################################\n\n");

                            // Write each entry URL%===%SHA1
                            for (Map.Entry<String, String> entry : cache.entrySet()) {
                                writer.write(entry.getKey() + DELIM + entry.getValue() + "\n");
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                public static String getSHA1ForPack(String urlString) throws Exception {
                    if (cache.containsKey(urlString)) {
                        return cache.get(urlString);
                    }

                    MessageDigest digest = MessageDigest.getInstance("SHA-1");
                    try (InputStream is = new URI(urlString).toURL().openStream()) {
                        byte[] buffer = new byte[8192];
                        int read;
                        while ((read = is.read(buffer)) > 0) {
                            digest.update(buffer, 0, read);
                        }
                    }

                    byte[] hash = digest.digest();
                    StringBuilder sb = new StringBuilder();
                    for (byte b : hash) {
                        sb.append(String.format("%02x", b));
                    }

                    String sha1 = sb.toString();
                    cache.put(urlString, sha1);
                    saveCache();
                    return sha1;
                }
            }